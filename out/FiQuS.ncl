# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let _js2n__-prdslib
  = {
    allOf
      : Array (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `allOf preds` succeeds if all of the predicates in `preds` succeed
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.1]
      "%
      = fun
          preds
          x
          =>
          std.array.fold_right
            (fun pred acc => (match { 'Ok => acc, 'Err s => 'Err s, }) (pred x))
            'Ok preds,
    always : Dyn -> [| 'Ok, 'Err String |] = std.function.const 'Ok,
    anyOf
      : Array (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `anyOf preds` succeeds if at least one of the predicates in `preds` succeeds
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.2]
      "%
      = fun
          preds
          x
          =>
          (match {
            'Ok =>
              'Ok,
            'Errs
              msgs =>
              'Err
                m%"
                  anyOf: none of the options matched
                  %{std.string.join
                    m%"
                      
                      
                    "% msgs}
                "%,
          })
            (std.array.fold_right
              (fun
                pred
                acc
                =>
                (match {
                  'Ok =>
                    'Ok,
                  'Errs
                    msgs =>
                    (match {
                      'Ok =>
                        'Ok,
                      'Err
                        msg =>
                        'Errs ([ "  - %{msg}" ] @ msgs),
                    }) (pred x),
                }) acc) ('Errs [  ]) preds),
    arrays =
      {
          additionalItems
            : (Dyn -> [| 'Ok, 'Err String |])
            -> Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.2]"
            = fun
                pred
                start
                x
                =>
                if !(std.is_array x) then
                  'Ok
                else
                  let x
                    | Array Dyn
                    = x
                    in
                  let value_length
                      = std.array.length x
                      in
                    if start >= value_length then
                        'Ok
                      else
                        arrayOf pred
                          ((std.array.slice start value_length x)
                          | Dyn),
          arrayOf
            : (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              Apply a predicate to all elements of an array, succeeding if all
              applications succeed.
            "%
            = fun
                pred
                x
                =>
                if !(std.is_array x) then
                  'Ok
                else
                  let x
                    | Array Dyn
                    = x
                    in
                  std.array.fold_right
                      (fun
                        x
                        acc
                        =>
                        (match { 'Ok => acc, 'Err msg => 'Err msg, }) (pred x))
                      'Ok x,
          contains
            : (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.6]"
            = fun
                pred
                x
                =>
                if !(std.is_array x) then
                  'Ok
                else
                  let x
                    | Array Dyn
                    = x
                    in
                  (match {
                      'Ok =>
                        'Ok,
                      'Errs
                        msgs =>
                        'Err
                          m%"
                            contains: no elements matched
                            %{std.string.join
                              m%"
                                
                                
                              "% msgs}
                          "%,
                    })
                      (std.array.fold_right
                        (fun
                          x
                          acc
                          =>
                          (match {
                            'Ok =>
                              'Ok,
                            'Errs
                              msgs =>
                              (match {
                                'Ok =>
                                  'Ok,
                                'Err
                                  msg =>
                                  'Errs ([ "  - %{msg}" ] @ msgs),
                              }) (pred x),
                          }) acc) ('Errs [  ]) x),
          items
            : Array (Dyn -> [| 'Ok, 'Err String |])
            -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.1]"
            = fun
                preds
                x
                =>
                if !(std.is_array x) then
                  'Ok
                else
                  let x
                    | Array Dyn
                    = x
                    in
                  let length_to_check
                      = std.number.min (std.array.length preds)
                        (std.array.length x)
                      in
                    std.array.fold_right
                        (fun
                          i
                          acc
                          =>
                          (match { 'Err msg => 'Err msg, 'Ok => acc, })
                            (std.array.at i preds (std.array.at i x))) 'Ok
                        (std.array.range 0 length_to_check),
          maxItems
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              `maxItems n x` fails if `x` is an array of length strictly greater than `n` and succeeds otherwise.
              Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.3]
            "%
            = fun
                n
                x
                =>
                if !(std.is_array x) then
                  'Ok
                else
                  if (std.array.length (x | Array Dyn)) > n then
                    'Err
                      "array is longer than %{std.string.from_number n} items"
                  else
                    'Ok,
          minItems
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              `minItems n x` fails if `x` is an array of length strictly smaller than `n` and succeeds otherwise.
              Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.4]
            "%
            = fun
                n
                x
                =>
                if !(std.is_array x) then
                  'Ok
                else
                  if (std.array.length (x | Array Dyn)) < n then
                    'Err
                      "array is shorter than %{std.string.from_number n} items"
                  else
                    'Ok,
          uniqueItems
            : Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              Succeeds for any array if its elements are pairwise distinct.
              Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.5]
            "%
            = let find_duplicate
                : Array Dyn
                -> {
                  has_duplicate : Bool,
                  duplicate : Dyn,
                  seen : { _ : Bool }
                }
                = std.array.fold_right
                  (fun
                    elt
                    acc
                    =>
                    if acc.has_duplicate then
                      acc
                    else
                      let index
                        = std.serialize 'Json elt
                        in
                      if std.record.has_field index acc.seen then
                          {
                            duplicate = elt,
                            has_duplicate = true,
                            seen = acc.seen,
                          }
                        else
                          {
                            duplicate = null,
                            has_duplicate = false,
                            seen = std.record.insert index true acc.seen,
                          })
                  { duplicate = null, has_duplicate = false, seen = {}, }
                in
              fun
                  x
                  =>
                  if !(std.is_array x) then
                    'Ok
                  else
                    let { has_duplicate, duplicate, .. }
                      = find_duplicate (x | Array Dyn)
                      in
                    if has_duplicate then
                        'Err "duplicate found: %{std.serialize 'Json duplicate}"
                      else
                        'Ok,
        },
    const
      : Dyn -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `const value x` succeeds if and only if `x` is equal to `value`
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.1.3]
      "%
      = fun
          value
          x
          =>
          if x == value then
            'Ok
          else
            'Err "expected %{std.serialize 'Json value}",
    contract_from_predicate
      : (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> Dyn -> Dyn
      = fun
          predicate
          label
          value
          =>
          (match {
            'Ok =>
              value,
            'Err
              msg =>
              (std.contract.blame_with_message msg label)
              | Dyn,
          }) (predicate value),
    enum
      : Array Dyn -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `enum values x` succeeds if and only if `x` is equal to one of the elements of `values`.
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.1.2]
      "%
      = let checkEqual
          = fun
            input
            variant
            =>
            (input == variant)
            || ((std.is_enum input)
            && (((std.string.from_enum input) == variant)
            | Bool))
          in
        fun
            values
            x
            =>
            std.array.fold_right
              (fun value acc => if checkEqual x value then 'Ok else acc)
              ('Err "expected one of %{std.serialize 'Json (values | Dyn)}")
              values,
    from_simple_predicate
      : String -> (Dyn -> Bool) -> Dyn -> [| 'Ok, 'Err String |]
      | doc "Convert a simple boolean predicate into a predicate supporting error messages"
      = fun error' pred x => if pred x then 'Ok else 'Err error',
    ifThenElse
      : (Dyn -> [| 'Ok, 'Err String |])
      -> (Dyn -> [| 'Ok, 'Err String |])
      -> (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `ifThenElse i t e` first checks if the predicate `i` succeeds. If it does, it's equivalent to `t`, otherwise it's equivalent to `e`.
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6]
      "%
      = fun i t e x => (match { 'Ok => t x, 'Err msg => e x, }) (i x),
    isType
      : [| '"Array", '"Bool", 'Integer, 'Null, '"Number", 'Record, '"String" |]
      -> Dyn -> [| 'Ok, 'Err String |]
      = fun
          t
          =>
          (match {
            'Null =>
              from_simple_predicate "expected `null`" (fun x => x == null),
            'Integer =>
              from_simple_predicate "expected an integer"
                (fun
                  x
                  =>
                  (std.is_number x) && (std.number.is_integer (x | Number))),
            _ =>
              from_simple_predicate
                "value is not of type %{std.string.from_enum t}"
                (fun x => (std.typeof x) == t),
          }) t,
    never : Dyn -> [| 'Ok, 'Err String |] = std.function.const ('Err "never"),
    not
      : (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `not pred` succeeds if and only if `pred` fails
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.4]
      "%
      = fun
          pred
          x
          =>
          (match {
            'Ok =>
              'Err "Inverted predicate succeeded unexpectedly",
            'Err
              msg =>
              'Ok,
          }) (pred x),
    numbers =
      {
          exclusiveMaximum
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.3]"
            = fun
                limit
                x
                =>
                if !(std.is_number x) then
                  'Ok
                else
                  if (x | Number) < limit then
                    'Ok
                  else
                    'Err
                      "expected an exclusive maximum of %{std.string.from_number
                        limit}",
          exclusiveMinimum
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.5]"
            = fun
                limit
                x
                =>
                if !(std.is_number x) then
                  'Ok
                else
                  if (x | Number) > limit then
                    'Ok
                  else
                    'Err
                      "expected an exclusive minimum of %{std.string.from_number
                        limit}",
          maximum
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.2]"
            = fun
                limit
                x
                =>
                if !(std.is_number x) then
                  'Ok
                else
                  if (x | Number) <= limit then
                    'Ok
                  else
                    'Err
                      "expected a maximum of %{std.string.from_number limit}",
          minimum
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.4]"
            = fun
                limit
                x
                =>
                if !(std.is_number x) then
                  'Ok
                else
                  if (x | Number) >= limit then
                    'Ok
                  else
                    'Err
                      "expected a minimum of %{std.string.from_number limit}",
          multipleOf
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.1]"
            = fun
                mult
                x
                =>
                if !(std.is_number x) then
                  'Ok
                else
                  if std.number.is_integer ((x | Number) / mult) then
                    'Ok
                  else
                    'Err
                      "expected a multiple of %{std.string.from_number mult}",
        },
    oneOf
      : Array (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
      | doc m%"
        `oneOf preds` succeeds if precisely one of the predicates in `preds` succeeds
        Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.3]
      "%
      = fun
          preds
          x
          =>
          let count_ok
            : Array [| 'Ok, 'Err String |] -> Number
            = fun
              results
              =>
              std.array.fold_left (fun n b => if b == 'Ok then n + 1 else n) 0
                results
            in
          let results
              = std.array.map (fun pred => pred x) preds
              in
            let count
                = count_ok results
                in
              if count == 0 then
                  let errors
                    = std.array.flat_map
                      (fun
                        result
                        =>
                        (match { 'Ok => [  ], 'Err s => [ "  - %{s}" ], })
                          result) results
                    in
                  'Err
                      m%"
                        oneOf: none of the options matched
                        %{std.string.join
                          m%"
                            
                            
                          "% errors}
                      "%
                else
                  if count > 1 then
                    'Err "oneOf: more than one of the options matched"
                  else
                    'Ok,
    records =
      {
          dependencies
            : { _ : Dyn } -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.7]"
            = let mustHaveFields
                : Array String -> { _ : Dyn } -> [| 'Ok, 'Err String |]
                = fun
                  fields
                  x
                  =>
                  std.array.fold_right
                    (fun
                      field
                      acc
                      =>
                      if !(std.record.has_field field x) then
                        'Err "expected field `%{field}`"
                      else
                        acc) 'Ok fields
                in
              fun
                  deps
                  x
                  =>
                  if !(std.is_record x) then
                    'Ok
                  else
                    let x
                      | { _ : Dyn }
                      = x
                      in
                    std.array.fold_right
                        (fun
                          { field, value, }
                          =>
                          fun
                            acc
                            =>
                            if !(std.record.has_field field x) then
                              acc
                            else
                              let result
                                = if std.is_array value then
                                  mustHaveFields (value | Array String) x
                                else
                                  let pred
                                    | Dyn -> [| 'Ok, 'Err String |]
                                    = value
                                    in
                                  pred (x | Dyn)
                                in
                              (match {
                                  'Err
                                    msg =>
                                    'Err
                                      "dependency of `%{field}` failed: %{msg}",
                                  'Ok =>
                                    acc,
                                }) result) 'Ok (std.record.to_array deps),
          maxProperties
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              `maxProperties n x` fails if `x` is a record containing stricly more than `n` fields.
              Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.1]
            "%
            = fun
                n
                x
                =>
                if !(std.is_record x) then
                  'Ok
                else
                  if (std.record.length (x | { _ : Dyn })) > n then
                    'Err
                      "record contains more than %{std.string.from_number
                        n} fields"
                  else
                    'Ok,
          minProperties
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              `minProperties n x` fails if `x` is a record containing stricly less than `n` fields.
              Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.1]
            "%
            = fun
                n
                x
                =>
                if !(std.is_record x) then
                  'Ok
                else
                  if (std.record.length (x | { _ : Dyn })) < n then
                    'Err
                      "record contains fewer than %{std.string.from_number
                        n} fields"
                  else
                    'Ok,
          propertyNames
            : (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.8]"
            = fun
                pred
                x
                =>
                if !(std.is_record x) then
                  'Ok
                else
                  std.array.fold_right
                    (fun
                      field
                      acc
                      =>
                      (match {
                        'Err
                          msg =>
                          'Err
                            "field `%{field}` did not validate against `propertyNames` schema",
                        'Ok =>
                          acc,
                      }) (pred (field | Dyn))) 'Ok
                    (std.record.fields (x | { _ : Dyn })),
          record
            : { _ : Dyn -> [| 'Ok, 'Err String |] }
            -> { _ : Dyn -> [| 'Ok, 'Err String |] }
            -> Bool
            -> (Dyn -> [| 'Ok, 'Err String |]) -> Dyn -> [| 'Ok, 'Err String |]
            | doc m%"
              `record properties patternProperties additionalAllowed
              additionalProperties x` is a combination of the `properties`,
              `patternProperties` and `additionalProperties` validation keywords in
              JSON schema.
              
              Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5]
            "%
            = fun
                properties
                patternProperties
                additionalAllowed
                additionalProperties
                x
                =>
                if !(std.is_record x) then
                  'Ok
                else
                  let x
                    | { _ : Dyn }
                    = x
                    in
                  let check_properties
                      : {
                        result : [| 'Ok, 'Err String |],
                        checked : { _ : Bool }
                      }
                      = std.array.fold_right
                        (fun
                          { field, value, }
                          =>
                          fun
                            acc
                            =>
                            if !(std.record.has_field field x) then
                              acc
                            else
                              (match {
                                'Err
                                  msg =>
                                  {
                                    checked : { _ : Bool } = {},
                                    result =
                                      'Err
                                          "field `%{field}` didn't validate: %{msg}",
                                  },
                                'Ok =>
                                  {
                                    checked =
                                      std.record.insert field true acc.checked,
                                    result = acc.result,
                                  },
                              }) (value x."%{field}"))
                        { checked = {}, result = 'Ok, }
                        (std.record.to_array properties)
                      in
                    let matching_fields
                        : String -> { _ : Dyn }
                        = fun
                          pattern
                          =>
                          let matcher
                            = std.string.is_match pattern
                            in
                          std.array.fold_left
                              (fun
                                acc
                                =>
                                fun
                                  { field, value, }
                                  =>
                                  if matcher field then
                                    std.record.insert field value acc
                                  else
                                    acc) {} (std.record.to_array x)
                        in
                      let check_pattern_properties
                          : {
                            result : [| 'Ok, 'Err String |],
                            checked : { _ : Bool }
                          }
                          = std.array.fold_right
                            (fun
                              { field = pattern, value = pred, }
                              =>
                              fun
                                acc
                                =>
                                (match {
                                  r @ { result = 'Err msg, .. } =>
                                    r,
                                  { result = 'Ok, checked = ch, } =>
                                    {
                                      checked =
                                        std.array.fold_left
                                            (fun
                                              r
                                              field
                                              =>
                                              if !(std.record.has_field field
                                                r) then
                                                std.record.insert field true r
                                              else
                                                r) acc.checked
                                            (std.record.fields ch),
                                      result = acc.result,
                                    },
                                })
                                  (std.array.fold_right
                                    (fun
                                      { field, value, }
                                      =>
                                      fun
                                        acc
                                        =>
                                        (match {
                                          'Err
                                            msg =>
                                            {
                                              checked : { _ : Bool } = {},
                                              result =
                                                'Err
                                                    "field `%{field}` didn't validate: %{msg}",
                                            },
                                          'Ok =>
                                            {
                                              checked =
                                                std.record.insert field true
                                                    acc.checked,
                                              result = acc.result,
                                            },
                                        }) (pred value))
                                    {
                                      checked : { _ : Bool } = {},
                                      result = 'Ok,
                                    }
                                    (std.record.to_array
                                      (matching_fields pattern))))
                            { checked : { _ : Bool } = {}, result = 'Ok, }
                            (std.record.to_array patternProperties)
                          in
                        let remaining_fields
                            = std.array.fold_left
                              (fun
                                acc
                                field
                                =>
                                if !(std.record.has_field field acc) then
                                  acc
                                else
                                  std.record.remove field acc) x
                              ((std.record.fields check_properties.checked)
                              @ (std.record.fields
                                check_pattern_properties.checked))
                            in
                          let check_additional_properties
                              : [| 'Ok, 'Err String |]
                              = if (!additionalAllowed)
                              && (!(std.record.is_empty remaining_fields)) then
                                'Err
                                  "extra fields %{std.serialize 'Json
                                    ((std.record.fields remaining_fields)
                                    | Dyn)}"
                              else
                                std.array.fold_right
                                  (fun
                                    { field, value, }
                                    =>
                                    fun
                                      acc
                                      =>
                                      (match {
                                        'Err
                                          msg =>
                                          'Err
                                            "field `%{field}` didn't validate: %{msg}",
                                        'Ok =>
                                          acc,
                                      }) (additionalProperties value)) 'Ok
                                  (std.record.to_array remaining_fields)
                              in
                            (match {
                                'Err
                                  msg =>
                                  check_properties.result,
                                'Ok =>
                                  (match {
                                    'Err
                                      msg =>
                                      check_pattern_properties.result,
                                    'Ok =>
                                      check_additional_properties,
                                  }) check_pattern_properties.result,
                              }) check_properties.result,
          required
            : Array String -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.3]"
            = fun
                fields
                x
                =>
                if !(std.is_record x) then
                  'Ok
                else
                  std.array.fold_right
                    (fun
                      field
                      acc
                      =>
                      if !(std.record.has_field field (x | { _ : Dyn })) then
                        'Err "missing required field %{field}"
                      else
                        acc) 'Ok fields,
        },
    strings =
      {
          maxLength
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.1]"
            = fun
                limit
                x
                =>
                if !(std.is_string x) then
                  'Ok
                else
                  if (std.string.length (x | String)) <= limit then
                    'Ok
                  else
                    'Err
                      "expected a string of length no larger than %{std.string.from_number
                        limit}",
          minLength
            : Number -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.2]"
            = fun
                limit
                x
                =>
                if !(std.is_string x) then
                  'Ok
                else
                  if (std.string.length (x | String)) >= limit then
                    'Ok
                  else
                    'Err
                      "expected a string of length no smaller than %{std.string.from_number
                        limit}",
          pattern
            : String -> Dyn -> [| 'Ok, 'Err String |]
            | doc "Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.3]"
            = fun
                pattern
                x
                =>
                if !(std.is_string x) then
                  'Ok
                else
                  if std.string.is_match pattern (x | String) then
                    'Ok
                  else
                    'Err "expected a string matching the pattern `%{pattern}`",
        },
  }
  in
let rec _js2n__-refsenv
    = {
      "_js2n__-:definitions/Air_g!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  ar = _js2n__-prdslib.isType '"Number",
                  name = _js2n__-prdslib.isType '"String",
                  sh_type = _js2n__-prdslib.isType '"String",
                  z_max = _js2n__-prdslib.isType '"Number",
                  z_min = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Air_s!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  mu_r = _js2n__-prdslib.isType '"Number",
                  sigma = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/CCTDM!predicate"
        | doc "Level 1: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  geometry =
                    _js2n__-refsenv."_js2n__-:definitions/GeometryCCTFiQuS!predicate",
                  mesh =
                    _js2n__-refsenv."_js2n__-:definitions/MeshCCT!predicate",
                  postproc =
                    _js2n__-refsenv."_js2n__-:definitions/PostprocCCTFiQuS!predicate",
                  solve =
                    _js2n__-refsenv."_js2n__-:definitions/SolveCCT!predicate",
                  type =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "CCT_straight" ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/FQPL_g!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  fndpls =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  fwhs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  fwws =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  n_sbs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  names =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  r_bs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  r_ins =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  thetas =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  z_ends =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  z_starts =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/FQPL_s!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  currents =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  mu_rs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  sigmas =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Former_gFiQuS!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  names =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  r_ins =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  r_outs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  z_maxs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  z_mins =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Former_s!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  mu_rs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  sigmas =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/GeneralFiQuS!predicate"
        | doc "Class for FiQuS general"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                { magnet_name = _js2n__-prdslib.isType '"String", } {} true
                _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/GeometryCCTFiQuS!predicate"
        | doc "Level 2: Class for FiQuS CCT for FiQuS input"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  air = _js2n__-refsenv."_js2n__-:definitions/Air_g!predicate",
                  formers =
                    _js2n__-refsenv."_js2n__-:definitions/Former_gFiQuS!predicate",
                  fqpls =
                    _js2n__-refsenv."_js2n__-:definitions/FQPL_g!predicate",
                  windings =
                    _js2n__-refsenv."_js2n__-:definitions/Winding_gFiQuS!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/GeometryMultipole!predicate"
        | doc "Level 2: Class for FiQuS Multipole"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                { with_iron_yoke = _js2n__-prdslib.isType '"Bool", } {} true
                _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/MPDM!predicate"
        | doc "Level 2: Class for FiQuS Multipole"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  geometry =
                    _js2n__-refsenv."_js2n__-:definitions/GeometryMultipole!predicate",
                  mesh =
                    _js2n__-refsenv."_js2n__-:definitions/MeshMultipole!predicate",
                  postproc =
                    _js2n__-refsenv."_js2n__-:definitions/PostProcMultipole!predicate",
                  solve =
                    _js2n__-refsenv."_js2n__-:definitions/SolveMultipoleFiQuS!predicate",
                  type =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "multipole" ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/MeshCCT!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  MaxAspectWindings = _js2n__-prdslib.isType '"Number",
                  ThresholdDistMax = _js2n__-prdslib.isType '"Number",
                  ThresholdDistMin = _js2n__-prdslib.isType '"Number",
                  ThresholdSizeMax = _js2n__-prdslib.isType '"Number",
                  ThresholdSizeMin = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/MeshMultipole!predicate"
        | doc "Level 2: Class for FiQuS Multipole"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  Algorithm = _js2n__-prdslib.isType 'Integer,
                  AngleToleranceFacetOverlap = _js2n__-prdslib.isType '"Number",
                  ElementOrder = _js2n__-prdslib.isType 'Integer,
                  MeshSizeFromCurvature = _js2n__-prdslib.isType '"Number",
                  MeshSizeMax = _js2n__-prdslib.isType '"Number",
                  MeshSizeMin = _js2n__-prdslib.isType '"Number",
                  Optimize = _js2n__-prdslib.isType 'Integer,
                  default_mesh = _js2n__-prdslib.isType '"Bool",
                  mesh_coil =
                    _js2n__-refsenv."_js2n__-:definitions/Threshold!predicate",
                  mesh_iron =
                    _js2n__-refsenv."_js2n__-:definitions/Threshold!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3D!predicate"
        | doc "Level 1: Class for FiQuS Pancake3D"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  geometry =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometry!predicate",
                  input_file_path = _js2n__-prdslib.isType '"String",
                  mesh =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DMesh!predicate",
                  postproc =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DPostprocess!predicate",
                  solve =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolve!predicate",
                  type =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "Pancake3D" ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DGeometry!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [
                  "air",
                  "contactLayer",
                  "gapBetweenPancakes",
                  "numberOfPancakes",
                  "terminals",
                  "winding"
                ],
              _js2n__-prdslib.records.record
                {
                  air =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometryAir!predicate",
                  contactLayer =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometryContactLayer!predicate",
                  contactLayerBoundaryName = _js2n__-prdslib.isType '"String",
                  dimensionTolerance =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  gapBetweenPancakes =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  numberOfPancakes =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  pancakeBoundaryName = _js2n__-prdslib.isType '"String",
                  terminals =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometryTerminals!predicate",
                  winding =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometryWinding!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DGeometryAir!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "axialMargin" ],
              _js2n__-prdslib.records.record
                {
                  axialMargin =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  cutName = _js2n__-prdslib.isType '"String",
                  generateGapAirWithFragment = _js2n__-prdslib.isType '"Bool",
                  height =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  name = _js2n__-prdslib.isType '"String",
                  radius =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  shellOuterRadius =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  shellSideLength =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  shellTransformation = _js2n__-prdslib.isType '"Bool",
                  shellTransformationMultiplier =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 1
                        ],
                  shellVolumeName = _js2n__-prdslib.isType '"String",
                  sideLength =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  type =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "cylinder", "cuboid" ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DGeometryContactLayer!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "thickness", "thinShellApproximation" ],
              _js2n__-prdslib.records.record
                {
                  name = _js2n__-prdslib.isType '"String",
                  thickness =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  thinShellApproximation = _js2n__-prdslib.isType '"Bool",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DGeometryTerminal!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "name", "thickness" ],
              _js2n__-prdslib.records.record
                {
                  name = _js2n__-prdslib.isType '"String",
                  radius =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  thickness =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DGeometryTerminals!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "inner", "outer" ],
              _js2n__-prdslib.records.record
                {
                  firstName = _js2n__-prdslib.isType '"String",
                  inner =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometryTerminal!predicate",
                  lastName = _js2n__-prdslib.isType '"String",
                  outer =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DGeometryTerminal!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DGeometryWinding!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "height", "innerRadius", "numberOfTurns", "thickness" ],
              _js2n__-prdslib.records.record
                {
                  height =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  innerRadius =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  name = _js2n__-prdslib.isType '"String",
                  numberOfTurns =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 3
                        ],
                  numberOfVolumesPerTurn =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.minimum 2
                        ],
                  outerRadius =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  sectionsPerTurn =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  startAngle = _js2n__-prdslib.isType '"Number",
                  thickness =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  totalTapeLength =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  turnTolerance =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DMesh!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [
                  "contactLayer",
                  "maximumElementSize",
                  "minimumElementSize",
                  "winding"
                ],
              _js2n__-prdslib.records.record
                {
                  air =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DMeshAirAndTerminals!predicate",
                  contactLayer =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DMeshContactLayer!predicate",
                  maximumElementSize =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  minimumElementSize =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  sizeMax =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  sizeMin =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  startGrowingDistance =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  stopGrowingDistance =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  terminals =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DMeshAirAndTerminals!predicate",
                  theWorstRectangularRatio =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  theWorstTriangularRatio =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  winding =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DMeshWinding!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DMeshAirAndTerminals!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  radialElementSize =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  structured = _js2n__-prdslib.isType '"Bool",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DMeshContactLayer!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "radialNumberOfElementsPerTurn" ],
              _js2n__-prdslib.records.record
                {
                  radialNumberOfElementsPerTurn =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.allOf
                              [
                                _js2n__-prdslib.isType 'Integer,
                                _js2n__-prdslib.numbers.exclusiveMinimum 0
                              ])
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DMeshWinding!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [
                  "axialNumberOfElements",
                  "azimuthalNumberOfElementsPerTurn",
                  "radialNumberOfElementsPerTurn"
                ],
              _js2n__-prdslib.records.record
                {
                  axialDistributionCoefficient =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Array",
                              _js2n__-prdslib.arrays.arrayOf
                                (_js2n__-prdslib.allOf
                                  [
                                    _js2n__-prdslib.isType '"Number",
                                    _js2n__-prdslib.numbers.exclusiveMinimum 0
                                  ])
                            ],
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Number",
                              _js2n__-prdslib.numbers.exclusiveMinimum 0
                            ]
                        ],
                  axialNumberOfElements =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Array",
                              _js2n__-prdslib.arrays.arrayOf
                                (_js2n__-prdslib.allOf
                                  [
                                    _js2n__-prdslib.isType 'Integer,
                                    _js2n__-prdslib.numbers.exclusiveMinimum 0
                                  ])
                            ],
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType 'Integer,
                              _js2n__-prdslib.numbers.exclusiveMinimum 0
                            ]
                        ],
                  azimuthalNumberOfElementsPerTurn =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Array",
                              _js2n__-prdslib.arrays.arrayOf
                                (_js2n__-prdslib.allOf
                                  [
                                    _js2n__-prdslib.isType 'Integer,
                                    _js2n__-prdslib.numbers.exclusiveMinimum 0
                                  ])
                            ],
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType 'Integer,
                              _js2n__-prdslib.numbers.exclusiveMinimum 0
                            ]
                        ],
                  elementType =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Array",
                              _js2n__-prdslib.arrays.arrayOf
                                (_js2n__-prdslib.allOf
                                  [
                                    _js2n__-prdslib.isType '"String",
                                    _js2n__-prdslib.enum
                                      [ "tetrahedron", "hexahedron", "prism" ]
                                  ])
                            ],
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"String",
                              _js2n__-prdslib.enum
                                [ "tetrahedron", "hexahedron", "prism" ]
                            ]
                        ],
                  radialNumberOfElementsPerTurn =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Array",
                              _js2n__-prdslib.arrays.arrayOf
                                (_js2n__-prdslib.allOf
                                  [
                                    _js2n__-prdslib.isType 'Integer,
                                    _js2n__-prdslib.numbers.exclusiveMinimum 0
                                  ])
                            ],
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType 'Integer,
                              _js2n__-prdslib.numbers.exclusiveMinimum 0
                            ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DPosition!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  turnNumber =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  whichPancakeCoil =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  x = _js2n__-prdslib.isType '"Number",
                  y = _js2n__-prdslib.isType '"Number",
                  z = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DPostprocess!predicate"
        | doc "TO BE UPDATED"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  magneticFieldOnCutPlane =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DPostprocessMagneticFieldOnPlane!predicate",
                  timeSeriesPlots =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DPostprocessTimeSeriesPlot!predicate"
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DPostprocessMagneticFieldOnPlane!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  colormap = _js2n__-prdslib.isType '"String",
                  interpolationMethod =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "nearest", "linear", "cubic" ]
                        ],
                  onSection =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.allOf
                              [
                                _js2n__-prdslib.isType '"Array",
                                _js2n__-prdslib.arrays.arrayOf
                                  (_js2n__-prdslib.isType '"Number")
                              ])
                        ],
                  planeNormal =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  planeXAxisUnitVector =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  streamLines = _js2n__-prdslib.isType '"Bool",
                  timesToBePlotted =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DPostprocessTimeSeriesPlot!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  fileName = _js2n__-prdslib.isType '"String",
                  getdpQuantityName = _js2n__-prdslib.isType '"String",
                  position =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DPosition!predicate",
                  quantity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "magnitudeOfMagneticField",
                              "temperature",
                              "magnitudeOfCurrentDensity",
                              "resistiveHeating",
                              "axialComponentOfTheMagneticField",
                              "totalResistiveHeating",
                              "voltageBetweenTerminals",
                              "currentThroughCoil",
                              "magnitudeOfHeatFlux",
                              "resistivity",
                              "derivativeOfRhoWithRespectToJ",
                              "magneticEnergy"
                            ]
                        ],
                  quantityProperName = _js2n__-prdslib.isType '"String",
                  units = _js2n__-prdslib.isType '"String",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolve!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [
                  "air",
                  "contactLayer",
                  "initialConditions",
                  "nonlinearSolver",
                  "terminals",
                  "time",
                  "type",
                  "winding"
                ],
              _js2n__-prdslib.records.record
                {
                  air =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveAir!predicate",
                  contactLayer =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveContactLayerMaterial!predicate",
                  initFromPrevious = _js2n__-prdslib.isType '"String",
                  initialConditions =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveInitialConditions!predicate",
                  isothermalInAxialDirection = _js2n__-prdslib.isType '"Bool",
                  localDefects =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveLocalDefects!predicate",
                  nonlinearSolver =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveNonlinearSolverSettings!predicate",
                  proTemplate = _js2n__-prdslib.isType '"String",
                  quantitiesToBeSaved =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveSaveQuantity!predicate"
                        ],
                  systemsOfEquationsType =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "linear", "nonlinear" ]
                        ],
                  terminals =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTerminalMaterialAndBoundaryCondition!predicate",
                  time =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTime!predicate",
                  type =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "electromagnetic",
                              "thermal",
                              "weaklyCoupled",
                              "stronglyCoupled"
                            ]
                        ],
                  winding =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveWindingMaterial!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveAdaptiveTimeLoopSettings!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  breakPoints =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  initialStep =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  integrationMethod =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "Euler",
                              "Gear_2",
                              "Gear_3",
                              "Gear_4",
                              "Gear_5",
                              "Gear_6"
                            ]
                        ],
                  maximumStep =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  minimumStep =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  postOperationTolerances =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTolerance!predicate"
                        ],
                  systemTolerances =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTolerance!predicate"
                        ],
                  tolerances =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTolerance!predicate"
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveAir!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "permeability" ],
              _js2n__-prdslib.records.record
                {
                  permeability =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveCERNNormalMaterial!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "name" ],
              _js2n__-prdslib.records.record
                {
                  getdpTSAMassHeatCapacityFunction =
                    _js2n__-prdslib.isType '"String",
                  getdpTSAMassResistivityFunction =
                    _js2n__-prdslib.isType '"String",
                  getdpTSAMassThermalConductivityFunction =
                    _js2n__-prdslib.isType '"String",
                  getdpTSARHSFunction = _js2n__-prdslib.isType '"String",
                  getdpTSAStiffnessResistivityFunction =
                    _js2n__-prdslib.isType '"String",
                  getdpTSAStiffnessThermalConductivityFunction =
                    _js2n__-prdslib.isType '"String",
                  getdpTSATripleFunction = _js2n__-prdslib.isType '"String",
                  heatCapacityMacroName = _js2n__-prdslib.isType '"String",
                  name =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "Copper",
                              "Hastelloy",
                              "Silver",
                              "Indium",
                              "Stainless Steel"
                            ]
                        ],
                  relativeThickness =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.maximum 1
                        ],
                  residualResistanceRatio =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  residualResistanceRatioReferenceTemperature =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  resistivityMacroName = _js2n__-prdslib.isType '"String",
                  thermalConductivityMacroName =
                    _js2n__-prdslib.isType '"String",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveCERNPlating!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "name" ],
              _js2n__-prdslib.records.record
                {
                  name =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "Copper" ]
                        ],
                  relativeWidth =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.maximum 1
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveCERNSuperConductorMaterial!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "criticalCurrentAtInitialTemperature", "name" ],
              _js2n__-prdslib.records.record
                {
                  IcValues =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  "N-Value for E-J Power Law" =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  criticalCurrentAtInitialTemperature =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Number",
                              _js2n__-prdslib.numbers.exclusiveMinimum 0
                            ],
                          _js2n__-prdslib.isType '"String",
                          _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveIcVsLength!predicate"
                        ],
                  electricFieldCriterion =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  getdpCriticalCurrentDensityFunction =
                    _js2n__-prdslib.isType '"String",
                  jCriticalScalingNormalToWinding =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  lengthValues =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  name =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "HTSSuperPower" ]
                        ],
                  relativeThickness =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.maximum 1
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveContactLayerMaterial!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  material =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNNormalMaterial!predicate",
                  numberOfThinShellElements =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  resistivity =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Number",
                              _js2n__-prdslib.numbers.exclusiveMinimum 0
                            ],
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"String",
                              _js2n__-prdslib.enum [ "perfectlyInsulating" ]
                            ]
                        ],
                  specificHeatCapacity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  thermalConductivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveFixedLoopInterval!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "endTime", "startTime", "step" ],
              _js2n__-prdslib.records.record
                {
                  endTime =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  startTime =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  step =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveFixedTimeLoopSettings!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  step =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveIcVsLength!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "criticalCurrentValues", "lengthValues" ],
              _js2n__-prdslib.records.record
                {
                  criticalCurrentValues =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  lengthValues =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveInitialConditions!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "temperature" ],
              _js2n__-prdslib.records.record
                {
                  temperature =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveLocalDefect!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  endTurn =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  startTime =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  startTurn =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  transitionDuration =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  value =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  whichPancakeCoil =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  zBottom = _js2n__-prdslib.isType '"Number",
                  zTop = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveLocalDefects!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  criticalCurrentDensity =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveLocalDefect!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveNonlinearSolverSettings!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  maximumNumberOfIterations =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  postOperationTolerances =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTolerance!predicate"
                        ],
                  relaxationFactor =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  systemTolerances =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTolerance!predicate"
                        ],
                  tolerances =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveTolerance!predicate"
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveSaveQuantity!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required [ "quantity" ],
              _js2n__-prdslib.records.record
                {
                  getdpPostOperationName = _js2n__-prdslib.isType '"String",
                  getdpQuantityName = _js2n__-prdslib.isType '"String",
                  quantity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "magneticField",
                              "magnitudeOfMagneticField",
                              "currentDensity",
                              "magnitudeOfCurrentDensity",
                              "resistiveHeating",
                              "temperature",
                              "voltageBetweenTerminals",
                              "currentThroughCoil",
                              "criticalCurrentDensity",
                              "heatFlux",
                              "resistivity",
                              "thermalConductivity",
                              "specificHeatCapacity",
                              "jHTSOverjCritical",
                              "criticalCurrent",
                              "magneticEnergy"
                            ]
                        ],
                  timesToBeSaved =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveTerminalMaterialAndBoundaryCondition!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  cooling =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [ "adiabatic", "fixedTemperature", "cryocooler" ]
                        ],
                  material =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNNormalMaterial!predicate",
                  numberOfThinShellElements =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  resistivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  specificHeatCapacity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  thermalConductivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveTime!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "end", "start", "timeSteppingType" ],
              _js2n__-prdslib.records.record
                {
                  adaptiveSteppingSettings =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveAdaptiveTimeLoopSettings!predicate",
                  end = _js2n__-prdslib.isType '"Number",
                  extrapolationOrder =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType 'Integer,
                          _js2n__-prdslib.enum [ 0, 1, 2, 3 ]
                        ],
                  fixedSteppingSettings =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.allOf
                            [
                              _js2n__-prdslib.isType '"Array",
                              _js2n__-prdslib.arrays.arrayOf
                                _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveFixedLoopInterval!predicate"
                            ],
                          _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveFixedTimeLoopSettings!predicate"
                        ],
                  start = _js2n__-prdslib.isType '"Number",
                  timeSteppingType =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum [ "fixed", "adaptive" ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveTolerance!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.required
                [ "absolute", "quantity", "relative" ],
              _js2n__-prdslib.records.record
                {
                  absolute =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  normType =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "L1Norm",
                              "MeanL1Norm",
                              "L2Norm",
                              "MeanL2Norm",
                              "LinfNorm"
                            ]
                        ],
                  position =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DPosition!predicate",
                  quantity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "solutionVector",
                              "totalResistiveHeating",
                              "voltageBetweenTerminals",
                              "resistiveHeating",
                              "temperature",
                              "magnitudeOfCurrentDensity",
                              "magnitudeOfMagneticField",
                              "axialComponentOfTheMagneticField",
                              "currentThroughCoil",
                              "magnitudeOfHeatFlux",
                              "magneticEnergy"
                            ]
                        ],
                  relative =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Pancake3DSolveWindingMaterial!predicate" =
        _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  material =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.oneOf
                              [
                                _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNNormalMaterial!predicate",
                                _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNSuperConductorMaterial!predicate"
                              ])
                        ],
                  maximumPossibleResistivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  minimumPossibleResistivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.minimum 0
                        ],
                  normalConductors =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNNormalMaterial!predicate"
                        ],
                  plating =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNPlating!predicate",
                  relativeThicknessOfNormalConductor =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  relativeThicknessOfSuperConductor =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  resistivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  specificHeatCapacity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                  superConductor =
                    _js2n__-refsenv."_js2n__-:definitions/Pancake3DSolveCERNSuperConductorMaterial!predicate",
                  thermalConductivity =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Number",
                          _js2n__-prdslib.numbers.exclusiveMinimum 0
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/PostProcMultipole!predicate"
        | doc "Level 2: Class for FiQuS Multipole"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  additional_outputs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  compare_to_ROXIE = _js2n__-prdslib.isType '"String",
                  file_exts =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  plot_all = _js2n__-prdslib.isType '"String",
                  variables =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  volumes =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/PostprocCCTFiQuS!predicate"
        | doc "Class for FiQuS CCT input file"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  additional_outputs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  file_exts =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  fqpl_export_trim_tol =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  variables =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  volumes =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  winding_order =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  windings_whns =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  windings_wwns =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/PowerSupply!predicate"
        | doc "Level 2: Class for FiQuS"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  I_control_LUT =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  I_initial = _js2n__-prdslib.isType '"Number",
                  R_crowbar = _js2n__-prdslib.isType '"Number",
                  Ud_crowbar = _js2n__-prdslib.isType '"Number",
                  t_control_LUT =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  t_off = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/RunFiQuS!predicate"
        | doc "Class for FiQuS run"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  comments = _js2n__-prdslib.isType '"String",
                  geometry =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.isType 'Integer
                        ],
                  launch_gui = _js2n__-prdslib.isType '"Bool",
                  mesh =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.isType 'Integer
                        ],
                  overwrite = _js2n__-prdslib.isType '"Bool",
                  solution =
                    _js2n__-prdslib.oneOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.isType 'Integer
                        ],
                  type =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"String",
                          _js2n__-prdslib.enum
                            [
                              "start_from_yaml",
                              "mesh_only",
                              "geometry_only",
                              "geometry_and_mesh",
                              "pre_process_only",
                              "mesh_and_solve_with_post_process_python",
                              "solve_with_post_process_python",
                              "solve_only",
                              "post_process_getdp_only",
                              "post_process_python_only",
                              "post_process"
                            ]
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/SolveCCT!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  air = _js2n__-refsenv."_js2n__-:definitions/Air_s!predicate",
                  file_exts =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  formers =
                    _js2n__-refsenv."_js2n__-:definitions/Former_s!predicate",
                  fqpls =
                    _js2n__-refsenv."_js2n__-:definitions/FQPL_s!predicate",
                  pro_template = _js2n__-prdslib.isType '"String",
                  variables =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  volumes =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  windings =
                    _js2n__-refsenv."_js2n__-:definitions/Winding_s!predicate",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/SolveMultipoleFiQuS!predicate"
        | doc "Level 2: Class for FiQuS Multipole"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  I_initial =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  pro_template = _js2n__-prdslib.isType '"String",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Threshold!predicate"
        | doc "Level 2: Class for FiQuS Multipole"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  DistMax = _js2n__-prdslib.isType '"Number",
                  DistMin = _js2n__-prdslib.isType '"Number",
                  SizeMax = _js2n__-prdslib.isType '"Number",
                  SizeMin = _js2n__-prdslib.isType '"Number",
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Winding_gFiQuS!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  alphas =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  lps =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  n_turnss =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  names =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"String")
                        ],
                  ndpt_ins =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  ndpt_outs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  ndpts =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType 'Integer)
                        ],
                  r_wms =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  wwhs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  wwws =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
      "_js2n__-:definitions/Winding_s!predicate"
        | doc "Level 2: Class for FiQuS CCT"
        = _js2n__-prdslib.allOf
            [
              _js2n__-prdslib.isType 'Record,
              _js2n__-prdslib.records.record
                {
                  currents =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  mu_rs =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                  sigmas =
                    _js2n__-prdslib.allOf
                        [
                          _js2n__-prdslib.isType '"Array",
                          _js2n__-prdslib.arrays.arrayOf
                            (_js2n__-prdslib.isType '"Number")
                        ],
                } {} true _js2n__-prdslib.always
            ],
    }
    in
  {
      general
        | _js2n__-prdslib.contract_from_predicate
          _js2n__-refsenv."_js2n__-:definitions/GeneralFiQuS!predicate"
        | optional,
      magnet
        | _js2n__-prdslib.contract_from_predicate
          (_js2n__-prdslib.oneOf
            [
              _js2n__-refsenv."_js2n__-:definitions/MPDM!predicate",
              _js2n__-refsenv."_js2n__-:definitions/CCTDM!predicate",
              _js2n__-refsenv."_js2n__-:definitions/Pancake3D!predicate"
            ])
        | optional,
      power_supply
        | _js2n__-prdslib.contract_from_predicate
          _js2n__-refsenv."_js2n__-:definitions/PowerSupply!predicate"
        | optional,
      run
        | _js2n__-prdslib.contract_from_predicate
          _js2n__-refsenv."_js2n__-:definitions/RunFiQuS!predicate"
        | optional,
      ..
    }